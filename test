import React from 'react';

const FolderSelector = () => {
  const handleFolderSelect = async () => {
    const folderPicker = document.createElement('input');
    folderPicker.setAttribute('type', 'file');
    folderPicker.setAttribute('webkitdirectory', 'true');
    folderPicker.setAttribute('directory', 'true');

    // Wait for user to select a folder
    await new Promise((resolve) => {
      folderPicker.addEventListener('change', resolve, { once: true });
      folderPicker.click();
    });

    const folderPath = folderPicker.files[0].path;
    console.log(folderPath);
    // Do something with the selected folder path, like set it in state
  };

  return (
    <div>
      <label htmlFor="folderInput">Select a folder:</label>
      <input
        type="text"
        id="folderInput"
        onClick={handleFolderSelect}
        readOnly
        placeholder="Click to select folder"
      />
    </div>
  );


async function getSubfolders() {
  try {
    const dirHandle = await window.showDirectoryPicker();
    const dirEntries = await dirHandle.values();

    // Filter out subdirectories
    const subfolders = [];
    for await (const entry of dirEntries) {
      if (entry.kind === 'directory') {
        subfolders.push(entry.name);
      }
    }

    console.log('Subfolders:', subfolders);
    return subfolders;
  } catch (error) {
    console.error('Error accessing directory:', error);
    return [];
  }
}

getSubfolders();


};

export default FolderSelector;


import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@GetMapping("/file/{filePath}")
public ResponseEntity<byte[]> getFile(@PathVariable String filePath) {
    try {
        Path path = Paths.get(filePath);
        byte[] fileBytes = Files.readAllBytes(path);
        return ResponseEntity.ok().body(fileBytes);
    } catch (IOException e) {
        e.printStackTrace();
        return ResponseEntity.notFound().build();
    }
}
import React, { useState } from 'react';

function FileComponent() {
    const [fileContent, setFileContent] = useState('');
    const [filePath, setFilePath] = useState('');

    const fetchFile = () => {
        fetch(`http://localhost:8080/file?filePath=${encodeURIComponent(filePath)}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(data => {
                setFileContent(data);
            })
            .catch(error => {
                console.error('Error fetching file:', error);
            });
    };

    return (
        <div>
            <input 
                type="text" 
                value={filePath} 
                onChange={e => setFilePath(e.target.value)} 
                placeholder="Enter file path"
            />
            <button onClick={fetchFile}>Fetch File</button>
            <div>{fileContent}</div>
        </div>
    );
}

export default FileComponent;



